2. Polimorfisme sangat membantu dalam kasus ini karena memungkinkan kita menangani berbagai jenis pegawai (seperti Manager dan Programmer) dengan cara yang seragam. Bayangkan jika kita harus menulis kode terpisah untuk setiap jenis pegawai—kodenya akan jadi panjang, berulang, dan sulit dikelola. Dengan polimorfisme, kita cukup membuat satu ArrayList<Pegawai> dan menyimpan semua objek di dalamnya, terlepas dari jenis spesifiknya. Saat memanggil tampilData(), Java otomatis menjalankan metode yang sesuai untuk masing-masing objek tanpa perlu pengecekan manual. Ini membuat kode lebih bersih, mudah dikembangkan, dan fleksibel. Misalnya, jika nanti ada jenis pegawai baru seperti Designer, kita tinggal buat kelas turunannya tanpa mengubah kode utama.


3. Jika polimorfisme tidak digunakan, kita akan menghadapi beberapa kendala. Pertama, kita harus membuat koleksi terpisah untuk setiap jenis pegawai (Manager, Programmer, dll.) dan menulis perulangan berbeda untuk masing-masingnya. Ini membuat kode jadi berantakan dan rentan error. Kedua, setiap kali ada jenis pegawai baru, kita harus menambahkan kode tambahan di banyak tempat, yang menyulitkan pemeliharaan. Tanpa polimorfisme, kode juga kehilangan fleksibilitasnya—kita tidak bisa dengan mudah memproses semua pegawai dalam satu loop, dan harus terus-menerus mengecek tipe objek secara manual. Alhasil, kode menjadi kaku, sulit dikembangkan, dan kurang efisien.